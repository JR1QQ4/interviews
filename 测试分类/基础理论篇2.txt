1.测试需求分析流程：
- 需求来源分析
    - 与待测软件相关的各种文档资料：产品需求规格文档、界面设计（原型图）、技术文档、其他参考资料
    - 业务背景资料
    - 与客户或产品测试或需求分析员的沟通：集中来问、不能存在模棱两可
    - 产品业务培训、需求评审会议
    - 旧系统原有功能及特性
- 整理业务流程及功能点框架
    - 业务流程需要清楚核心业务流程
    - 清晰功能及子功能点的层级关系
    - 可以借助xmind工具
        - 多阅读几遍文档，先整理功能点框架，不懂的地方与产品探讨
- 提取测试点和细化
    - 正常功能
    - 功能验证
    - 功能交互验证
    - 隐形需求
        - 多站在用户立场分析、不要局限在惯性思维、利用好网络资源

2.规范测试流程
- 软件测试的基本流程
    - 需求分析阶段：阅读需求，理解需求，主要是对业务的学习，分析需求，参与需求评审会议
    - 计划阶段：主要任务是编写测试计划，参考需求规格说明书、项目总体计划，内容包括测试范围、进度的安排，人力物力的分配，整体测试策略的制定，和
    风险的评估与规避措施的制定，一般由测试主管编写
    - 设计阶段：主要任务是编写测试用例，会参考需求文档、概要设计、详细设计等文档，有不明确的也会及时和开发、产品经理沟通，用例编写完成后进行评审
    - 执行阶段：首先搭建测试环境，执行预测，以判定当前版本可测与否，如果测试通过，正式进入系统测试，遇到问题提交Bug和缺陷管理平台，并对bug进行
    跟踪，直到被测软件达到测试需求要求没有重大bug，测试结束
    - 评估阶段：出具测试报告，对总个测试的过程和版本质量做一个详细的评估，确认是否可以上线
- 软件开发流程：需求分析-->得知功能组成及设计软件结构、数据结构（概要设计、详细设计）-->编写代码-->单元测试-->代码审核-->集成测试-->打包提交
测试部-->等待测试提交bug-->修复bug-->等待测试回归bug-->...N轮-->版本上线-->面向用户使用
- 测试流程：需求分析-->编写测试用例-->评审测试用例-->搭建测试环境-->等待开发研发完成，提交测试包进行测试（酱油期）-->部署测试包-->冒烟测试
（预测）-->执行测试用例（）-->bug跟踪处理（提交及回归bug）-->...N轮-->版本上线-->面向用户使用

3.敏捷开发
- 强调以人为本，专注于交付对客户有价值的软件，弱化文档
- 流程
    - 产品负责人将整个产品设计成产品代办列表，就是一个个需求列表（可以理解为需求或要做的事情）
    - 召开产品迭代计划会议，确定哪些需求是需要在第一个迭代中完成的，评估迭代的时间（建议是2-6周），得到相应的迭代周期任务列表
        - ps：提前发布功能需求列表，会议提倡所有团队人员参与
    - 把迭代的功能需求卸载纸条上贴在任务墙，让大家（自主认领）认领分配（任务墙就是把未完成、正在做、已完成的工作状态贴到一个墙上，这样大家都
    可以看的到任务的状态）
        - 举行每日站立会议，让大家在每日会议上总结昨天做的事情、遇到什么困难，今天开展什么任务（是在每天早上定时和大家在任务墙前站立讨论，时间
        控制在15分钟内）
        - 绘制燃尽图，保证任务的概况能够清晰看到
    - 评审会议，在迭代完成时进行，要向客户演示自己完成的软件产品，并获得客户的反馈
    - 最后是总结会议，以轮流发言方式进行
- 适用原则
    - 个人与互动：重于流程与工具
    - 可用的软件：重于详尽的文件
    - 与客户合作：重于合约协商
    - 回应变化：重于遵循计划

4.bug提交及跟踪
- bug的跟踪管理流程
    - 发现bug-->提交bug-->指派bug-->研发确认bug（不是缺陷、重复、无法重现）-->研发是否解决（不予解决、延期）-->回归验证bug-->
    是否通过验证（重新打开）-->关闭bug
- 如何提交一个高效bug
    - bug标题：标题要清晰简洁，写明bug描述（bug的功能模块+bug的操作+bug的结果）
    - 重现步骤
    - 实际结果
    - 预期结果
    - bug类型和严重程度
    - bug测试环境
    - 附件
- bug的状态处理
    - 已经指派的bug
    - 已解决的bug
    - 重复bug
    - 不是缺陷
    - 无法重现
    - 不予解决
    - 设计如此
    - 延期修改

5.用例设计
- 软件测试用例就是指导你执行测试，帮助你证明软件功能或发现软件缺陷的一种说明
    - 总结：每一个测试点的数据设计和步骤设计；对需求进行分析，整理测试点
    - 组成：用例编号、功能模块、测试标题、前提条件、操作步骤、期望结果（含判断标准）、实际结果、备注等（第几轮测试）
- 如何编写用例
    - 1、正常功能：是否可以正常提交
    - 2、单个功能项验证（正常+异常）：重点输入项意识
        - 规则：按顺序从上至下，对每一个输入项进行验证
        - 1）数据长度、数据类型验证、必填项验证、重复
        - 2）限制约束验证
    - 3、功能交互验证：模块之间传递的信息和数据，对存在功能交互的功能项
    - 4、隐形需求：充分熟悉产品业务，挖掘隐性需求
- 场景法
    - 定义：通过场景描述的业务流程（业务逻辑），也包括代码实现逻辑，设计测试用例来遍历场景（路径），验证软件系统功能的正确性
    - 步骤：画出流程图-->列出测试用例，使得流程图的所有判断分支都覆盖到
        - 注意啊：场景法的重点是测试流程，因此每个流程一个用例验证即可，流程测试没有问题并不能说明系统功能没有问题了，还需要针对单步的功能进行
        测试，只有单个功能点和流程测试，才算是充分的测试
    - 了解流程图（流程图=流程+图）
- 因果图/判定表法
    - 因果图法最终生成的就是判定表，将判定表的每一列作为依据，设计测试用例
    - 适用：检查程序输入条件的各种组合情况，例如约束关系、组合关系
    - 步骤：
        - 先列出原因（即输入条件或输入条件的等价类）和结果（输出条件）
        - 画出因果图
        - 判定表法：因果图方法最终生成的就是判定表，一般可以根据因果图画出判定表，判定表里只有0，1两个数字
        - 得到测试用例
            - 判定表是否可简化？若表中输出结果存在相同，且其输入条件存在极相似关系，则可合并简化

6.测试报告
- 编写阶段：软件测试的五个阶段中的评估阶段
- 包括：测试范围、测试环境、遗留的bug有哪些、测试用例覆盖率有多少、bug的统计与分析、风险由哪些、版本测试评估、发布的建议

7.软件测试计划
- 为什么需要？一般是主管写，测试计划是在做完需求分析后，整个测试工作开始之前做的一些准备工作，“5W+1H”去记忆，一般包括：目的、测试范围、测试
进度安排、测试人员、测试环境、测试方法、测试工具、风险评估、培训计划

8.Web测试
- 测试要点
    - 功能测试
        - 链接测试：跳转是不是正常，所链接的页面是否存在，有没有孤立的页面
        - 表单测试：输入框，下拉框，图片视频 EXCEL TXT 等文件上传，表单提交按钮
        - 搜索测试：任单个条件查询，任两个组合查询，三个组合查询，默认条件查询，根据需求或者业务规则选取重点条件组合查询，全条件查询，时间搜索框
        - 删除测试：没有选择数据删除，选择一条数据删除，删除一条数据后，连续删除多个产品，全选删除，删除一个有关联性的数据，所有删除数据操作后页面更新
        - cookies、session测试
        - 数据库测试
    - 界面/可用性测试：依据产品、原型图及UI切图/效果图进行对比验证，确认是否一致
        - 导航测试
        - 图形测试
        - 内容测试
        - 表格测试
        - 整体界面测试
    - 兼容性测试：百度统计，包含对不同的操作系统平台、浏览器、分辨率测试
        - 开展人工测试，测试 web 应用在主流浏览器显示正常，不会有页面错乱错位
        - 借助第三方测试工具，第三方 web 测试工具具有 IEtester（离线）、Browsershots（browsershots.org 在线）、
    - 接口测试
        - 定义：接口测试是测试系统组件间接口的一种测试，用于检测外部系统与系统之间以及内部各个子系统之间的交互，包括模块接口测试、后端接口测试
        、外部接口测试；从底层发现 bug，前端未开发完成提前介入测试
        - 接口类型：HTTP 接口、WebService 接口（wsdl 结尾）
        - 数据的传递方式：xml、json
        - 接口测试工具：jmeter、soapui、postman、loadrunner
    - 安全测试
        - SQL 注入：`' or 1=1--`、`" or 1=1--`、` or 1=1--`、`' or 'a'='a`、`" or "a"="a`、`') or ('a'='a`
        - 跨站点脚本攻击 XSS：`<script>alert(document.cookie)</script>`
        - 跨站点伪造请求 CSPF：通过安全性测试工具检查
        - 目录遍历：URL 中输入 `../`、`./`
        - 错误信息：400、500 页面
        - 漏洞扫描工具：AppScan
    - 性能测试
        - 定义：性能测试是通过性能测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试（并发用户数、响应时间、TPS、吞吐量）
        - 为什么要做？客户方要求、评估系统的能力、识别体系中的弱点、系统调优、验证可靠性稳定性
        - 步骤：获取测试需求-->（测试需求确定、业务模型调研、测试架构调研）-->测试计划-->测试方案设计-->环境搭建-->测试用例设计-->测试数据
        准备-->测试环境试运行-->测试脚本开发-->创建模型（场景）-->（监控调试）执行场景-->测试结果分析-->（问题处理）问题反馈-->最终报告
















