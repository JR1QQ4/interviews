1.软件测试的定义
- 软件测试的艺术的定义：测试是为发现错误而执行程序的过程
- IEEE定义：使用人工或自动手段来运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别
- GB/T 11457：依据规范的软件测试过程和检测方法，按照测试计划和测试需求对被检测软件的文档、程序和数据进行测试的技术活动
- 其他：
    - 确信程序做了它应该做的事情
    - 确认程序正确实现了所要求的功能
    - 查出规格说明中错误，以及规格说明不符的地方
    - 测试是一切以评价程序或系统的属性、能力为目的的活动；测试是对程序质量的度量
    - 评价程序或系统的过程
    - 测试是与软件开发或位符工作并行进行的一个过程
    - 测试是一个获取信息，降低决策风险的过程。通过测试，向整个团队提供关于产品质量和项目环境的信息，帮助他们做出决定

2.软件测试的过程
- 分析测试需求：了解软件要做什么，怎么做，进而确定将来怎么测试
- 编写测试计划：由测试负责人编写
    - 内容：产品概述、测试范围/测试区域/测试项、测试目标/被测特征、测试优先级、测试配置/测试资源（硬件、软件、人力）、测试周期、
    进度安排（测试任务、人员安排）、测试策略、测试方法/途径、测试交流、风险分析、测试标准、需交付文档等内容
- 设计与编写测试用例
- 执行测试：搭建测试环境，执行测试用例，记录测试事件，提交和跟踪缺陷
- 评估与总结

3.软件测试的目的/目标：
- 单元测试阶段，预防错误
- 开发测试阶段（集成测试、系统测试），发现错误
- 验收测试阶段，建立信心
- 运行测试（性能、兼容、安装升级、非功能测试），提供信息

4.概念
- 测试：由测试人员发现，用于发现、报告和跟踪缺陷
- 调试：由开发人员进行，用于定位缺陷位置，识别缺陷产生原因，修改缺陷代码
- 软件质量保证SQA：制定和加强促进软件开发并防止软件缺陷的标准和方法，并监督标准和过程被正确的遵循
- 软件测试：在最短的时间类发现尽可能多的缺陷，并确保这些缺陷得以修复

5.软件质量需求
- 用于确定测试目标
- 测试目标包括：功能、性能、界面、易用性、兼容性、安全性、可用性/可靠性、可维护性、可扩展性等，功能以外统称非功能
    - 功能：软件能做什么，需要做什么，怎么做是正确的，哪些功能需要测试、哪些不需要测试，哪些功能重要、哪些不重要，哪些先测试、哪些后测试
    - 性能：时间特性（时间短、速度快、效率高），资源特性（占用资源CPU、内存、硬盘、网络少）
    - 界面（UI）：布局合理，控件位置恰当，文字没有乱码、字体大小合适，颜色使用恰当，图片、表格恰当、舒适、美观
    - 易用性：软件产品被理解、学习、使用和吸引用户的能力
    - 兼容性/可移植性：包括与不同硬件、平台、软件自身不同版本、其他软件、数据的兼容
    - 安全性：软件产品保护信息和数据的能力
    - 可用性/可靠性：可用性=正常运行时间/(正常运行时间+非正常运行时间)*100%，可用性一般要求达到4个9即99.99%（全年52分钟不正常工作），
    测试时间不足可以采用空间换时间的方法（高负载运行），关注MTTF(平均无故障时间)、MTTR(平均恢复时间)、MTBF(平均失效间隔时间)
    - 可维护性：修正、改进或软件对环境需求和功能规格说明变化的适应（打补丁、自动恢复）
    - 可扩展性/可伸缩性测试：通过很少的改动就能实现整个系统处理能力的增长

6.怎么研读文档
- 总体上
    - 分析软件的用户群，分析用户的实际需要
    - 分析软件的开发环境、开发语言
    - 分析软件架构、软件的运行环境和平台、数据库类型
    - 分析软件要实现哪些目标（功能、性能、界面、易用性、兼容性、安全性）以及具体的要求是什么
    - 分析软件有哪些功能，每个功能要完成什么业务，这些业务应该怎么实现，业务逻辑是什么，业务流程是怎么样的
    - 分析功能或业务间的联系，哪些业务更关键或重要
    - 明确测试周期，测试目标，测试范围
- 细节上
    - 分析每个模块或功能上实现的功能
    - 设计的开发原理包括数据类型
    - 从用户使用场景角度分析业务流程
    - 记录业务规则
- 实施
    - 以情境再现的形式写出需求信息

7.软件测试的原则
- 搜友的测试都应该追溯到用户需求
- 尽早启动测试工作：缺陷雪崩，测试的成本
- 早做测试计划
- 穷尽测试是不可能的 & 软件测试是有风险的
- 测试工作的 Good-enough 原则：既不要过多测试，也不做不充分的测试
- Pareto（帕累托）法则，28效率原则
- 尽可能使用分阶段测试
- 为了达到最佳效果，应该由独立的第三方来构造测试
- 测试旨在发现存在的缺陷
- 为了保证测试的有效性和高效性，测试必须是破坏性、系统性的
- 找到的软件缺陷越多，说明软件隐含的缺陷越多
- 杀虫剂怪事
- 使用木桶原理
- 前进两步，后退一步：缺陷修复总会有一定机率引入新的缺陷，再测试/确认测试，回归测试
- 软件测试是一个迭代的过程
- 测试需要遵循标准：国际标准（如ISO、CMM、IEEE），国家标准（GB、GB/T），行业标准，公司标准，用户规定
- 其他的一些测试理念：思路决定测试，具体问题具体分析，无责任心不成测试，测试不能靠猜测

8.常见的开发模型
- 大爆炸模型：计划、进度安排和正规开发过程都几乎没有
- 边写边改模型：摸着石子过河模型，典型的非正规说明书->编码、修改、反复->最终产品
- 瀑布模型：制定周密计划的模型，计划、需求分析、设计、编码、测试、运行、评价
- 螺旋模型：计划赶得上变化的模型
- 敏捷模型：快速原型、极限编程，敏捷宣言——个体与交付重于过程和工具、可用的软件重于完备的文档、客户协作重于合同谈判、响应变化重于遵循计划

9.常见的测试模型
- V 模型：旨在改进瀑布模型的开发效率和效果，用户需求、需求分析、概要设计、详细设计、编码、单元测试、集成测试、系统测试、验收测试；瀑布模型
- W 模型：强调了测试方案设计，也强调了测试执行；内测
- H 模型：各阶段间可以反复触发、迭代、增量；就绪点，伴随第三方测试
- X 模型
- 前置模型
- 敏捷测试模型：极限编程XP，强调连续测试

10.大纲分解功能
- 大纲法：主要用于对软件进行功能拆分
    - 模块：包含多个功能操作的对象或功能集合
    - 功能点/功能：能独立完成一件事或一个业务
    - 业务流程：软件为了完成业务或完成核心功能所经历的步骤
    - 业务逻辑：是对业务的不同处理方式
    - 业务规则：如要求用户名只能用英文，5-11个字符等
- 开始编写测试需求分析
    - 将功能拆分与整理的需求信息写入测试需求分析
    - 大致包含的内容：需求编号、模块、功能、原始需求、需求整理

11.测试需求分析与测试用例设计方法
- 场景法
    - 测试点/检查点：测试时应该考虑可以测试的诸多方面
    - 概述——场景法模拟用户操作软件时的情景，主要用于测试系统的业务流程
    - 定义——场景用于描述软件操作的路径：基本流（正确的业务流程）、备选流（错误的操作流程）
    - 分析步骤：分析软件需求、从用户使用场景角度写出业务流程和业务规则、写出基本流场景和备选流场景
- 等价类划分
    - 通过需求分析，找出程序的输入域；将输入域划分成若干类；每一类中选取代表性数据等价于这议类中的其他值
    - 步骤：需求分析->划分等价类（根据需求，有效等价类、无效等价类）并细化
- 边界值分析
    - 分析需求，找出边界；学出边界值（最小值、小于最小值、最大值、大于最大值）
- 决策表
    - 需求分析，分析输入和输出；水平^因素，因素表示有几个输入，水平表示输入可能的情况的个数
    - 适用于多种输入的存在组合情况；可以使用填、不填来简化用例
- 错误推测（故障模型）
    - 根据经验或直觉推测程序中可能存在的各种错误，从而有针对性地编写检查这些错误
    - 错误推测分类：
        - 输入数据测试方面：
            - 输入非法数据：用于键盘输入数据时，输入非法类型、范围/长度、格式
            - 输入默认值
            - 输入特殊字符（集）：适用于不能输入有特殊含义的字符，如 Windows 中文件名不能包括 `\ /<>|“:*?`，用户名为 root、admin，`zh3'--`
            - 输入合法数据的非法组合
            - 通过复制粘贴强制输入程序不允许输入的数据
        - 输出数据测试方面
            - 同一个输入产生多种输出
            - 验证输出结果的正确性
            - 操作数和操作符不符
        - 数据结构测试方面
            - 数据结构溢出
            - 计算结果溢出
        - 文件系统方面
            - 使文件系统超载
            - 更改文件访问权限
            - 使介质忙或不可用
            - 介质损坏

12.需求评审
- 意义：
    - 对软件需求进行正确性的检查
    - 保证软件需求的可测试性
    - 通过产品需求文档的评审，与市场、产品、开发等各部门相关人员沟通，使得大家认识一致，避免在后期产生不同的理解，引起争吵
    - 通过产品需求文档的评审，更好地理解产品的功能性和非功能性
    - 在需求文档评审通过后，测试目标和范围就确定了。虽然此后会有需求的变更，但可以得到有效的控制，这样降低测试的风险
    - 评审是否完成是以需求文档获得多方”邮件确认“或”签字“通过为标志的。这不应该只体现在”签字“形式上，更重要的是达到下面的效果
        - 所有参与方达成一致
        - 已发现的问题被阐述清楚、被修正
- 需求评审的质量要求
    - 正确性、完备性、易理解性、一致性、可行性、易修改性、可测试性、可追溯性
- 需求评审的参加人员
    - 用户代表、需求人员、产品经理、项目经理、开发人员、开发经理、测试人员、测试经理、市场经理、质量保证人员
- 测试人员参与评审时的注意事项
    - 明确自己的角色和责任
    - 熟悉评审内容，为评审做好准备
    - 针对问题阐述观点，而不是针对个人
    - 可以分别讨论主要的问题和次要的问题
    - 在会议前后可以就存在的问题提出自己建设性的意见
    - 提高自己的沟通能力，采取适当的、灵活的表述方法
    - 对发现的问题跟踪下去
    - 应该在需求形成的过程中进行分阶段的多次评审
    - 测试人员要善于提问，多思考
        - 这些需求都是用户提出来的吗？
        - 有没有画蛇添足地需求？没有漏掉什么需求吗？
        - 和竞争对手的产品做过比较吗？我们的产品优势体现在哪里？
        - 是否正确地描述了每个需求？这条需求是否存在二义性地问题？
        - 我的理解和文档作者的理解一致吗？

13.软件测试的阶段
- 单元测试（组件测试）：单元可以是由一个或若干个最接近的函数或过程做组成，也可以是一个类或类的实例，也可以是一个文字输入窗或一个按钮等
    - 驱动器（Driver）：是通过接口与测试对象通讯的辅助工具。用于调用被测试的组件或系统替代性程序
    - 桩模块（Stub）：用于替代或模拟哪些还没有完成的组件（模块），用于模拟输入和输出（针对不完整的功能）
    - 模拟器（Simulation）：用于系统来描述另一个要测试的抽象系统的行为特征
    - 测试重点：功能性测试、健壮性（逆向测试：无效值）、性能
- 集成测试：集成——把组件/系统合并为更大部件的过程，集成测试一种旨在暴露接口以及集成组件/系统间交互时存在的缺陷的测试
    - 集成测试的策略：自顶向下集成，自底向上集成
    - 测试重点：接口、系统内不同部分的相互作用
- 系统测试：测试集成系统以验证它是否满足制定需求的过程
    - 测试重点：系统需求、整个系统的功能、非功能的需求
- 验收测试：一般由用户/客户进行的确认是否接收一个系统的验证性测试，是根据用户需求，业务流程进行的正式测试以确保系统符合所有验收准则
    - 测试验证，是否在现有的技术背景下，系统满足了客户显性和隐性的需求
    - 验收测试的分类：用户验收测试、运行（验收）测试、合同和法规性验收测试、α和β测试（现场测试/现场验收测试）

14.测试计划
- 定义：
    - IEEE 829-1983 一个叙述了预定的测试活动的范围、途径、资源及进度安排的文档。它确认了测试项目、被测特征、测试任务、人员安排以及任何
偶发事件的风险
    - 测试计划是指导测试过程的纲领性文档。计划可以统一认识，可以规划过程
    - 包含了产品概述、测试区域/测试范围（测试项）、测试目标（被测特征）、测试优先级、测试配置/测试资源（硬件、软件、人力、技术等）、测试周期、
进度安排（测试任务、人员安排）、测试策略、测试方法/途径、测试交流、风险分析、测试标准、需求交付文档等内容
- 测试计划进入与退出准则、责任人
    - 测试计划进入准则：项目需求文档建立
    - 测试计划退出准则：测试计划由项目组评审通过
    - 测试计划负责人：测试负责人
- 编写原则
    - 1.明确测试的目标，增强测试计划的实用性
    - 2.坚持“5W”规则，明确内容与过程：what（做什么）、why（为什么做）、when（何时做）、where（在哪里）、how（如何做）
    - 3.采用评审和更新机制，保证测试计划满足实践需求
        - 测试计划创建完毕后必须提交给由项目经理、开发经理、测试经理、市场经理等组成的评审委员会审阅
    - 4.测试计划中不要包含详细的测试技术指标、测试步骤和测试用例
        - 测试计划和测试详细规格、测试用例之间是战略和战术的关系
- 测试计划的主要工作
    - 确定测试资源：人力资源、硬件资源、软件资源
    - 工作能估算、里程碑和进度安排
        - 任务细分：测试计划->需求和设计评审->测试设计和脚本开发->测试执行->测试环境建立和维护->测试结果分析和报告->测试管理工作
    - 风险分析
        - 基本内容有：风险识别、风险评估和风险控制
        - 风险识别类别：人员风险、环境风险、测试范围（广度）、测试深度、回归测试、需求变更、用户期望、测试技术、测试工具
        - 风险评估：制定风险管理计划和风险应急处理方案，来降低风险和消除风险
    - 制定测试策略
        - 描述当前测试项目的目标和所采用的测试方法；描述在规定的实践类哪些测试内容要完成，软件产品的特性和质量在哪些方面得到确认；描述测试
        不同阶段（单元测试、集成测试、系统测试）的测试对象、范围和方法；描述每个阶段类所要进行的测试类型（功能测试、性能测试、压力测试等）
    - 编写计划书

15.测试用例
- 定义：对一项特定的软件产品进行测试任务的描述，指定输入，预期结果和一组测试项的执行条件的文档。体现测试方案、方法、技术和策略；内容包括
测试目标、测试环境、输入数据、测试步骤、预期结果、测试脚本等
- 测试用例的元素：
    - 测试目标： Why——为什么而测？ 功能、 性能、 可用性、 容错性、 兼容性、 安全性等
    - 测试对象： What——测什么？ 被测试的项目， 如对象、 函数、 类、 菜单、 按钮、 表格、 接口、 整个系统等
    - 测试环境： Where——在哪里测？ 测试用例运行时所处的环境， 包括系统的配置和设定等要求， 也包括操作系统、 浏览器、 通讯协议等单机或网络环境
    - 测试前提： When——什么时候可是测？ 测试用例运行时所处的前提或条件限制
    - 输入数据： Which——那些数据？ 在操作时， 系统所接受的各种可变化的数据，如数字、 字符、 文件等
    - 操作步骤： How——如何测？ 执行软件和程序的先后次序步骤等。 如打开对话框、 点击按钮等
- 测试用例的评审和管理
    - 保证测试用例质量的方法
    - 测试用例的优先级
    - 测试用例评审要点
        - 根据检查单或检查表（Check List） 进行评审：用例“文字校对”、用例质量
        - 确定用例的优先级
        - 规划服务器和客户机
        - 用例的分工执行与人员安排
        - 记录评审过程， 记录测试环境规划
    - 测试用例的维护
- 用例设计与编写方法总结
    - 通过测试
    - 失败测试
    - 随机测试
    - 应用群集效应
    - 探索性测试
    - 如何选择用例设计与编写方法：
        - 先使用大纲法拆分功能
        - 再使用场景法、决策表设计测试用例：如果程序的功能说明中含有输入条件的组合情况， 则应在一开始就选用决策表法
        - 用等价类划分方法、 边界值分析方法、 错误猜测法补充测试用例
        - 执行测试时进行探索性测试或随机测试
        - 执行完测试用例后进行随机测试

16.提交缺陷报告
- 缺陷
    - 什么是缺陷：软件存在着不符合质量需求或违背软件用户、客户、企业意愿的问题
    - 软件缺陷的判定准则：
        - 软件未达到产品说明书标明的功能
        - 软件出现了产品说明书指明不会出现的错误
        - 软件功能超出产品说明书指明范围
        - 软件未达到产品说明书虽未指出但应达到的目标
        - 软件测试员认为软件难以理解、不易使用、运行速度缓慢，或者最终用户认为不好
    - 软件缺陷的表现形式
        - 用户要求的功能、特性没有实现或部分实现
        - 运行出错，包括运行中断、系统崩溃、界面混乱等
        - 数据结果不正确、精度不够、不完整或格式不统一
        - 文字显示内容不正确或拼写错误
        - 系统性能低下、系统资源浪费
    - 避免提交缺陷的缺陷和重复缺陷
        - 缺陷的缺陷：是测试人员提交的不是缺陷的缺陷、是一种无效缺陷、此类缺陷常使测试人员遭受指责->正确理解需求、做好复现
        - 重复缺陷：同一个缺陷 A 测试工程师提交后，B 测试工程师又提交或者自己提交的缺陷与之前提交的缺陷相同或类似->尽量避免两个人同时测试
        同一模块
    - 提交缺陷报告
        - 缺陷报告是对缺陷进行记录、分类和跟踪的文档
        - 缺陷报告的写作准则（5C）
            - Correct（准确）每个组成部分的描述准确， 不会引起误解
            - Clear（清晰）每个组成部分的描述清晰， 易于理解
            - Concise（简洁）只包含必不可少的信息， 不包括任何多余的内容
            - Complete（完整）包含复现该缺陷的完整步骤和其他本质信息
            - Consistent（一致）按照一致的格式书写全部缺陷报告
    - 缺陷报告的组织结构
        - 缺陷的标题/缺陷摘要/缺陷概述/缺陷基本信息：尽量按缺陷发生的原因与结果的方式书写，避免使用模糊不清的词语
        - 预处理
        - 复现步骤：步骤完整，准确，简短，没有缺漏任何操作步骤，没有任何多余的步骤；尽量使用短语和短句，避免复杂句型和句式；只记录各个操作
        步骤是什么，不要包括每个步骤的执行结果
        - 期望结果
        - 实际结果：描述要列出具体的表现行为，而不是简单的指出“不正确” 或“不起作用”；多个结果应该使用数字列表分隔开来
        - 缺陷的严重程度
        - 缺陷的优先级
        - 测试的软件和硬件环境
        - 测试的软件版本
        - 缺陷的类型
        - 注释文字和缺陷截图
    - 缺陷的分类标准
        - 缺陷类型：功能缺陷、界面缺陷、文档缺陷、代码缺陷、算法错误、性能缺陷
        - 缺陷严重程度
        - 缺陷优先级
        - 缺陷状态：Submitted/已提交、Open/打开、Rejected/已拒绝、Resolved/已解决、Verified/已验证、Closed/已关闭
