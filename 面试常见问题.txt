1.没有测试计划会怎么样？ 如果没有测试计划，会带来哪些问题呢？
很难确切地知道具体的测试范围，以及应该采取的具体测试策略；
很难预估具体的工作量和所需要的测试工程师数量，同时还会造成各个测试工程师的分工不明确， 引发某些测试工作被重复执行而有些测试则被遗漏的问题；
测试的整体进度完全不可控，甚至很难确切知道目前测试的完成情况，对于测试完成时间就更难预 估准确的时间节点了；
整个项目对潜在风险的抵抗能力很弱，很难应对需求的变更以及其他突发事件。

2.怎么制定测试计划?
- 一份好的测试计划要包括：测试范围、测试策略、测试资源、 测试进度和测试风险预估
- 测试策略的话题 测试策略简单来讲就是需要明确“先测什么后测什么”和“如何来测”这两个问题
    - 测试策略还需要说明，采用什么样的测试类型和测试方法。 这里需要注意的是，不仅要给出为什么要选用这个测试类型，还要详细说明具体
    的实施方法：
        - 第一，功能测试，你应该根据测试需求分析的思维导图来设计测试用例主线业务的功能测试
            - 由于经常需要执行回归测试，所以你需要考虑实施自动化测试，并且根据项目技术 栈和测试团队成员的习惯与能力来选择合适的
            自动化测试框架
        - 第二，兼容性测试，Web测试需要确定覆盖的浏览器类型和版本，移动设备测试需要确定覆盖的设备 类型和具体iOS/Android的版本等
            - 如果是既有产品，你可以通过大数据技术分析产品的历史数据得出Top 30%的移动设备以 及iOS/Android的版本列表，那么兼容性测
            试只需覆盖这部分即可。 如果是一个全新的产品，你可以通过TalkingData这样的网站来查看目前主流的移动设备，分辨率大 小、
            iOS/Android版本等信息来确定测试范围
        - 第三，性能测试，对于性能测试，需要在明确了性能需求（并发用户数、响应时间、事务吞吐量等）的前提下，结合被测 系统的特点，
        设计性能测试场景并确定性能测试框架
            - 比如，是直接在API级别发起压力测试，还是必须模拟终端用户行为进行基于协议的压力测试。再比 如，是基于模块进行压力测试，
            还是发起全链路压测
        - 还有很多其他测试类型（比如，接 口测试、集成测试、安全测试、容量验证、安装测试、故障恢复测试等）
- 测试资源 测试资源通常包括测试人员和测试环境，这两类资源都是有限的。测试计划的目的就是，保证在有限资 源下的产出最大化。所以，
测试资源就是需要明确“谁来测”和“在哪里测”这两个问题
- 测试进度主要描述各类 测试的开始时间，所需工作量，预计完成时间，并以此为依据来建议最终产品的上线发布时间
    - 比如，版本接受测试（Build Acceptance Test）的工作量，冒烟测试（Smoke Test）的工作量，自动化 脚本开发的工作量，缺陷修复的
    验证工作量，需要几轮回归测试、每一轮回归测试的工作量等等
- 测试风险预估 俗话说，计划赶不上变化，对于测试也是一样的道理，很少有整个测试过程是完全按照原本测试计划执行的
    - 通常需求变更、开发延期、发现重大缺陷和人员变动是引入项目测试风险的主要原因
        - 对于需求变更，比如增加需求、删减需求、修改需求等，一定要重新进行测试需求分析，确定变更后的 测试范围和资源评估，并与项目
        经理和产品经理及时沟通因此引起的测试进度变化

3.给你一个APP你将如何展开测试？
- 安装卸载
    - 安装卸载路径是否能自己选择，在不同操作系统下（Android、ios）安装是否正常，能正常运行，安装的文件及文件夹是否写入了指定的目
    录里，安装来自不同来源的（应用宝、360助手）下是否正常；在没网的情况下能否安装
    - 卸载是否删除所有相关的文件；安装成功后需要拿到那些权限才能正常使用
- 功能测试
    - 运行、应用的前后台切换、免登录、数据更新、离线浏览、App更新、定位、启动相机服务。。根据软件说明看看提供的功能是否能正确并如
    设计的一样正常运作
- 客户端性能测试
    - 一个app不仅仅表现在功能上，还要看在不同操作系统下，以及中低端机上的性能表现
    - 主要关注的参数有：CPU、内存、耗电量、流量、FPS，同时也需要关注一下App安装耗时和启动耗时
- 服务器性能测试
    - 主要包含单机容量测试和24小时稳定性测试；
        - 单机容量测试，可以检测到单机服务器在90%的响应时间和成功率都达标的前提下，能够承载多少用户量
        - 使用特定游戏模型压测24小时，服务无重启，内存无泄漏，并且各事务成功率达标
- UI测试
    - 测试用户界面（菜单、对话框、窗口）等布局，文字正确，页面美观，操作友好，符合行业标准，易操作
- 兼容性测试
    - 在不同品牌手机上的安装、点击、卸载、运行
    - 在不同操作系统上的安装、点击、卸载、运行
    - 与本地及主流App是否兼容
- 安全测试
    - 检测是否容易被外界破解，是否存在被恶意代码注入的风险，软件权限、安装与卸载安全、数据安全、通讯安全、人机接口安全性

4.HTTP
- HTTP 主要内容分为三部分，超文本（Hypertext）、传输（Transfer）、协议（Protocol）
    - 超文本就是不单单只是本文，它还可以传输图片、音频、视频，甚至点击文字或图片能够进行 超链接 的跳转
    - 上面这些概念可以统称为数据，传输就是数据需要经过一系列的物理介质从一个端系统传送到另外一个端系统的过程。通常我们把传输数据包
    的一方称为请求方，把接到二进制数据包的一方称为应答方
    - 而协议指的就是是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互
    通信需要共同遵守一定的规则，这些规则就称为协议，只不过是网络协议

6.TCP/IP
- 四层模型：
    - 应用层：HTTP(80)、SMTP(25)、FTP(21)、Telent(23)、DNS
    - 运输层：TCP、UDP
    - 网络层：IP、ARP
    - 网络接口层
- 五层模型：
    - 应用层：HTTP、SMTP、FTP、Telent、DNS
    - 运输层：TCP、UDP
    - 网络层：IP、ARP
    - 链路层：MAC
    - 物理层

7.OSI
- 七层模型，在五层模型之上加了表示层和会话层
    - 应用层：HTTP、SMTP、FTP、Telent、DNS
    - 表现层
    - 会话层
    - 运输层：TCP、UDP
    - 网络层：IP、ARP
    - 链路层：MAC
    - 物理层
