1.当使用美团团购购买套餐后，后台发生了哪些业务流程？
- 客户端向服务器发起套餐购买，并带上用户ID、商品ID、token等信息
- 服务器收到客户端发送的请求，校验用户信息以及根据商品ID查询库存情况，并将库存结果返回客户端
- 客户端收到服务器返回的库存结果，库存不足提示库存信息，库存充足选择调起支付平台的支付SDK，并向服务器发起支付请求
- 服务器收到客户端的请求后，校验用户信息以及商品ID信息，校验通过，服务器通知支付平台后台生成预支付订单号。支付平台后台将生成的
预支付订单信息，预支付订单号返回美团服务器后台。美团服务器后台收到信息，生成带签名的客户端支付信息返回客户端
- 客户端输入密码确认支付、支付平台返回支付结果给客户端

- 客户端同步支付结果到美团服务器后台，上传订单信息、签名、用户信息等
- 服务器根据客户端上传的订单号以及订单信息到支付宝或微信服务后台验单
- 验单通过，更新库存信息，更新用户账户信息，更新商品信息，更新订单管理记录，并将结果返回客户端和商家
- 客户端、商家后台订单信息及时更新，提示购买成功， 并生成对应的订单记录

2.当用户第一次打开并登陆外卖App后会看到App的首页，打开和登陆外卖App的过程中发生了哪些具体的动作行为以及可能导致的缺陷？
- 首次打开App，App会进行应用的初始化和相关数据的加载。可能的缺陷包括启动闪退，打开过程加载时间过长，App启动过程的界面显示错误
- 登陆App的过程中会进行用户名和密码的校验，以及根据分控策略阻止异常账号的登陆。可能的缺陷包括用户名密码未加密存储和显示，账户登陆异常信息提示错误
- App首页加载：用户位置定位，根据用户位置展示附近商圈的外卖门店信息。可能的缺陷包括用户位置定位失败或者错误，外卖门店信息加载失败和错误，网络加载失败等

3.当使用美团App扫描美团单车上的二维码后，发生了什么？
- 二维码识别：开锁url、车辆id等
- 网络通信和页面渲染
- 业务逻辑判断：车锁状态正常、账户余额充足、用户身份正常、用户GPS位置正常
- 执行开锁、计费开始

4.当前的移动互联网产品，大都为以移动App形式呈现的一个典型的Client/Server或客户/服务器的体系结构：用户通过UI操作触发移动用户端发送
一个网络请求给后台服务，众多后台微服务以及各种数据存储相互协作，得到用户想要的信息，并发送回移动应用端。移动端根据接收到的响应，
展示不同的信息给用户。
假设当你在移动App中，点击一个按钮，比方说，美团的登陆按钮，如果从移动App的界面看起来，任何事情都没有发生，你将如何分析定位问题大
致发生在什么地方？
- 程序问题:
    - 按钮的监听事件未正确调用，或者干脆就没有添加监听
    - 监听确认被调用，但监听过程出现错误或异常，例如参数传输失败
    - 前端调用接口错误，如后端出现运行时异常，没有给出相应的提示消息
- 设备问题:
    - 网络延迟，响应没有及时出现，超时; 可能发生了断网，或者碰到了极弱网的情况
    - 手机卡顿，出现死机现象; 可能是用户的移动设备发生故障，未读取到用户点击操作，同时可能是用户操作系统发生故障
    - 响应被中断
        - 从服务器段考虑，可能是系统负载较大，对用户响应很慢，也有可能用户请求再传输过程中丢失，导致服务器未读取到请求

5.将给定的字符串，按照规则删除字符，输出删除后的字符串。删除规则为：相同字符连续，则删除，如”aaaab”删除后的字符串为”b” 。注：仅是
单个字符连续才删除，如babababa则不能删除；
def del_str(input_str):
    while True:
        try:
            result = ""
            for i in range(len(input_str)):
                if len(input_str) == 1:
                    result = input_str
                    return result
                if i == 0:
                    if input_str[i + 1] != input_str[i]:
                        result += input_str[i]
                elif i == len(input_str) - 1:
                    if input_str[i - 1] != input_str[i]:
                        result += input_str[i]
                else:
                    if input_str[i - 1] != input_str[i] and input_str[i + 1] != input_str[i]:
                        result += input_str[i]
            if len(result) == 0:
                return "no"
            else:
                return result
        except:
            raise

6.小美和小团在玩一个游戏，小美任意给出一个大字符串str1以及一个独立的小字符串str2，小团需要从这个大字符串str1里找到包含独立小字符串
str2中所有字符的最小子字符串str3；
例如，小美给出一个大字符串"meituan2019"和一个子字符串"i2t"，那么小团给出的答案就应该是"ituan2"；
需要注意：
1、str1中有可能没有完整包含str2所有字符的情况，此时返回""，即为空字符串；
2、str1不会为空，但str2有可能为空，此时返回整个str1；
3、str2可能存在重复的字符，此时str3需要包含相等数量该字符；
class Solution:
    @staticmethod
    def getMinString(str1, str2):
        if not str2:
            return str1
        min_index = len(str2)
        max_index = 0
        flag = 0
        str3 = list(str1).copy()
        for i in str2:
            if i in str3:
                flag += 1
                min_index = min(str3.index(i), min_index)
                max_index = max(str3.index(i), max_index)
                str3[str3.index(i)] = " "
        return str1[min_index:max_index + 1] if flag == len(str2) else ""

7.一个班级男生和女生数量相同，老师要求男生女生进行排队，男生全部排在队列前面，女生紧跟着排在男生队列后面，形成一个队列，现在要求
男生女生交叉排列并且第一位是男生，且每个人在在原队列中的顺序不变，如何来做？
要求：
交叉前：队列[男1，男2，男3，男4…男n，女1，女2，女3，女4…女n]
交叉后：队列[男1，女1，男2，女2，男3，女3，男4，女4…男n，女n]





